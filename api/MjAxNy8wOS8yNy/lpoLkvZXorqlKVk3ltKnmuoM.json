{"title":"如何让JVM崩溃","date":"2017-09-27T13:00:00.000Z","date_formatted":{"ll":"2017年9月27日","L":"2017/09/27","MM-DD":"09-27"},"link":"2017/09/27/如何让JVM崩溃","tags":["JVM"],"categories":["学习"],"updated":"2024-10-10T08:03:05.466Z","content":"<p>A perfect JVM implementation will never crash.<br>\nTo crash a JVM, aside from JNI, you need to find a bug in the VM itself. An infinite loop just consumes CPU. Infinitely allocating memory should just cause OutOfMemoryError’s in a well built JVM. This would probably cause problems for other threads, but a good JVM still should not crash.<br>\nIf you can find a bug in the source code of the VM, and for example cause a segmentation fault in the memory usage of the implementation of the VM, then you can actually crash it.</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>这个你需要说一下你指的“崩溃”是什么：是指让机器的资源用尽，还是触发系统不允许的异常，还是触发JVM的设计错误，还是其他的。“崩溃”这个概念还是很宽泛的。——资源用尽，不管任何语言都有个万能的办法：几个空函数循环调用，让系统的递归栈爆栈，也就是stack overflow。触发系统不允许的异常，访问不在自己程序申请之内的内存即可，也就是segmentation fault。不过我相信你期待的多半不是这两个答案。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> jvm;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Crash</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Object[] o = &#123;“abc”&#125;;初始值赋值，不会有影响。</span></span><br><span class=\"line\">        Object[] o = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            o = <span class=\"keyword\">new</span> Object[] &#123; o &#125;;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(o);</span></span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space at jvm.Crash.main(Crash.java:10)是因为程序无法申请到足够的内存的时候抛出的异常，Object数组o不断指向新的Object数组，数组元素是原来的Object数组，这使得Object维数越来越高。不断申请内存空间，最终导致超出jvm中堆的最大值。<br>\n输出打印的话，虚拟机并不是不会崩溃，而是崩溃的时间大大延长了。而崩溃时间延长其实是假象，是因为输出属于IO事件，每次输出CPU都被中断，IO很耗时，所以，感觉上才会时间延长。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<p><a href=\"https://stackoverflow.com/questions/65200/how-do-you-crash-a-jvm\" target=\"_blank\">How do you crash a JVM?</a></p>\n","prev":{"title":"自定义Feign日志打印","link":"2017/10/09/自定义Feign日志打印"},"next":{"title":"Dubbo源码简析","link":"2017/09/04/Dubbo源码简析"},"plink":"https://zinki.github.io/2017/09/27/如何让JVM崩溃/","toc":[{"id":"参考","title":"参考","index":"1"}]}