{"title":"线程池及异步使用","date":"2021-08-29T11:30:00.000Z","date_formatted":{"ll":"2021年8月29日","L":"2021/08/29","MM-DD":"08-29"},"link":"2021/08/29/线程池及异步使用","tags":["线程池"],"categories":["工作"],"updated":"2024-10-10T08:03:05.473Z","content":"<p>异步执行程序在实践中经常使用，除Spring自带@Async注解外，可以通过自定义线程池来实现，自由度更高。<span id=\"more\"></span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程池核心线程数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> CORE_POOL_SIZE = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadPoolExecutor threadPoolExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, CORE_POOL_SIZE</span><br><span class=\"line\">            , CardConstants.TEN, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;&gt;(),<span class=\"keyword\">new</span> ThreadFactoryBuilder().setNamePrefix(<span class=\"string\">&quot;async-&quot;</span>).build());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步执行方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> runnable</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">    threadPoolExecutor.execute(runnable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调试时注意到进程在执行完成后不会消亡</p>\n<h3 id=\"原因\">原因<a title=\"#原因\" href=\"#原因\"></a></h3>\n<p>JVM退出的条件是当前不存在用户线程，而线程池默认的ThreadFactory创建的线程是用户线程。</p>\n<p>首先我们需要了解线程池在什么情况下会自动关闭。<strong>ThreadPoolExecutor</strong> 类（这是我们最常用的线程池实现类）的源码注释中有这么一句话：</p>\n<blockquote>\n<p>A pool that is no longer referenced in a program and has no remaining threads will be shutdown automatically.</p>\n<p>没有引用指向且没有剩余线程的线程池将会自动关闭。</p>\n</blockquote>\n<p>由于核心线程一直存在，所以线程池不会关闭。</p>\n<h3 id=\"解决办法\">解决办法<a title=\"#解决办法\" href=\"#解决办法\"></a></h3>\n<ol>\n<li>\n<p>手动关闭线程池 <code>threadPoolExecutor.shutdown();</code></p>\n</li>\n<li>\n<p>核心线程数量设置为0，超时时间后线程池会自动关闭</p>\n</li>\n<li>\n<p>设置属性<code>allowCoreThreadTimeOut </code>来实现</p>\n</li>\n</ol>\n<h3 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h3>\n<p><a href=\"https://segmentfault.com/a/1190000021225019\" target=\"_blank\">Java 线程池会自动关闭吗</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1330497\" target=\"_blank\">使用线程池时候当程序结束时候记得调用shutdown关闭线程池</a></p>\n","prev":{"title":"PowerMock基础教程","link":"2021/09/15/PowerMock基础教程"},"next":{"title":"Git批量更新脚本","link":"2021/08/19/git批量更新脚本"},"plink":"https://zinki.github.io/2021/08/29/线程池及异步使用/","toc":[{"id":"原因","title":"原因","index":"1"},{"id":"解决办法","title":"解决办法","index":"2"},{"id":"参考","title":"参考","index":"3"}]}