{"title":"证书及密钥相关概念","date":"2021-06-20T07:40:00.000Z","date_formatted":{"ll":"2021年6月20日","L":"2021/06/20","MM-DD":"06-20"},"link":"2021/06/20/证书及密钥相关概念","tags":["加密"],"categories":["工作"],"updated":"2024-10-10T08:03:05.477Z","content":"<p>根据非对称密码学的原理，每个证书持有人都有一对公钥和私钥，这两把密钥可以互为加解密。<br>\n公钥是公开的，不需要保密，而私钥是由证书持有人自己特有，并且必须妥善保管和注意保密。数字证书则是由证书认证机构（CA）对证书申请者真实身份验证之后，用CA的根证书对申请人的一些基本信息以及申请人的公钥进行签名（相当于加盖发证书机构的公章）后形成的一个数字文件。<span id=\"more\"></span></p>\n<p>数字证书就是经过CA认证过的公钥，因此数字证书和公钥一样是公开的。可以这样说，数字证书就是经过CA认证过的公钥，而私钥一般情况都是由证书持有者在自己本地生成或委托受信的第三方生成的，由证书持有者自己负责保管或委托受信的第三方保管。</p>\n<h3 id=\"证书概述\">证书概述<a title=\"#证书概述\" href=\"#证书概述\"></a></h3>\n<p>证书主要包括颁发者和被办法者的信息,以及被颁发者的公钥，和CA机构对这些信息的认证。<br>\n主要内容：</p>\n<p><strong>版本</strong><br>\n识别用于该证书的 X.509 标准的版本，这可以影响证书中所能指定的信息。迄今为止，已定义的版本有三个。</p>\n<p><strong>序列号</strong><br>\n发放证书的实体有责任为证书指定序列号，以使其区别于该实体发放的其它证书。此信息用途很多。例如，如果某一证书被撤消，其序列号将放到证书撤消清单 (CRL) 中。</p>\n<p><strong>签名算法标识符</strong><br>\n用于识别 CA 签写证书时所用的算法。</p>\n<p><strong>签发人姓名</strong><br>\n签写证书的实体的 X.500 名称。它通常为一个 CA。 使用该证书意味着信任签写该证书的实体（注意：有些情况下（例如根或顶层 CA 证书），签发人会签写自己的证书）。</p>\n<p><strong>有效期</strong><br>\n每个证书均只能在一个有限的时间段内有效。该有效期以起始日期和时间及终止日期和时间表示，可以短至几秒或长至一世纪。所选有效期取决于许多因素，例如用于签写证书的私钥的使用频率及愿为证书支付的金钱等。它是在没有危及相关私钥的条件下，实体可以依赖公钥值的预计时间。</p>\n<p><strong>主体名</strong><br>\n证书可以识别其公钥的实体名。此名称使用 X.500 标准，因此在Internet中应是唯一的。它是实体的特征名 (DN)，例如，<br>\nCN=Java Duke，OU=Java Software Division，O=Sun Microsystems Inc，C=US<br>\n（这些指主体的通用名、组织单位、组织和国家）。<br>\n<strong>主体公钥信息</strong><br>\n这是被命名实体的公钥，同时包括指定该密钥所属公钥密码系统的算法标识符及所有相关的密钥参数。<br>\nPEM DER 只是编码方式，注意并不指定是证书的编码方式，也可以是密钥的编码方式<br>\n各种名词和文件后缀</p>\n<ol>\n<li>X.509 - 这是一种证书标准,主要定义了证书中应该包含哪些内容.</li>\n<li>两种编码方式：<br>\nPEM - Privacy Enhanced Mail,打开看文本格式,以<code>-----BEGIN...</code>开头, <code>-----END...</code>结尾,内容是BASE64编码.<br>\n查看PEM格式证书的信息:<code>openssl x509 -in certificate.pem -text -noout Apache</code>和NIX服务器偏向于使用这种编码格式.<br>\n<code>DER - Distinguished Encoding Rules</code>,打开看是二进制格式,不可读.</li>\n</ol>\n<p>查看DER格式证书的信息:<code>openssl x509 -in certificate.der -inform der -text -noout</code>Java和Windows服务器偏向于使用这种编码格式.</p>\n<h3 id=\"各种文件拓展名：\">各种文件拓展名：<a title=\"#各种文件拓展名：\" href=\"#各种文件拓展名：\"></a></h3>\n<ol>\n<li>CRT - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码</li>\n<li>CER - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.</li>\n<li>KEY - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER.</li>\n<li>CSR - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥</li>\n<li>PFX/P12 - predecessor of PKCS#12,对nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个&quot;提取密码&quot;<br>\n总结起来：crt cer约等于x509证书，key保存公钥或私钥，csr是证书签名请求，pfx包含证书和私钥</li>\n<li>PKCS系列<br>\n当我发现还有PKCS系列时，我很凌乱， PKCS系列是 Public-Key Cryptography Standards ，是RSA制定的一系列的标准，注意前面写的什么文件后缀啥的，都不算是标准，只有X509和PKCS可以称为标准， PKCS中经常使用的就是：PKCS1 PKCS8 PKCS12<br>\n• PKCS#1：定义RSA公开密钥算法加密和签名机制，主要用于组织PKCS#7中所描述的数字签名和数字信封。<br>\n• PKCS#8：描述私有密钥信息格式，该信息包括公开密钥算法的私有密钥以及可选的属性集等。注意pkcs8不只是能表示RSA，所以比PKCS1更具有通用性<br>\n• PKCS#12：描述个人信息交换语法标准。描述了将用户公钥、私钥、证书和其他相关信息打包的语法。<br>\n总结：PKCS1,8,12都可以在某些情况下当作文件格式，PKCS1描述基础的密钥格式，PKCS8也描述密钥，但格式和1不同，PKCS12等价于PFX文件，包含证书和私钥</li>\n</ol>\n<h3 id=\"openssl\">OpenSSL<a title=\"#openssl\" href=\"#openssl\"></a></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生成PKCS<span class=\"comment\">#1的公私钥</span></span><br><span class=\"line\">openssl genrsa -out pkcs1_private.pem 1024</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> pkcs1_private.pem -RSAPublicKey_out -out pkcs1_public.pem</span><br><span class=\"line\"></span><br><span class=\"line\">查看私钥</span><br><span class=\"line\"> openssl rsa -<span class=\"keyword\">in</span> rsa_private_key.pem -text -noout</span><br><span class=\"line\">查看公钥</span><br><span class=\"line\">openssl rsa -pubin -<span class=\"keyword\">in</span>  rsa_public_key.pem  -text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由PKCS#1的私钥，生成PKCS#8的公私钥</span></span><br><span class=\"line\">openssl pkcs8 -topk8 -inform PEM -<span class=\"keyword\">in</span> pkcs1_private.pem -outform PEM -nocrypt -out from_pkcs1_private_to_pkcs8_private.pem</span><br><span class=\"line\"></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> pkcs1_private.pem -pubout -out from_pkcs1_private_to_pkcs8_public.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由PKCS#8的私钥，生成PKCS#1的公私钥</span></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> from_pkcs1_private_to_pkcs8_private.pem -out from_pkcs8_private_to_pkcs1_private.pem</span><br><span class=\"line\"></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> from_pkcs1_private_to_pkcs8_private.pem -RSAPublicKey_out -out from_pkcs8_private_to_pkcs1_public.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由PKCS1公钥生成PKCS#8公钥:</span></span><br><span class=\"line\">openssl rsa -RSAPublicKey_in -<span class=\"keyword\">in</span> pkcs1_public.pem -pubout -out from_pkcs1_public_to_pkcs8_public.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由PKCS8公钥生成PKCS#1公钥:</span></span><br><span class=\"line\">openssl rsa -pubin -<span class=\"keyword\">in</span> from_pkcs1_private_to_pkcs8_public.pem -RSAPublicKey_out -out from_pkcs8_public_to_pkcs1_public.pem</span><br><span class=\"line\"></span><br><span class=\"line\">产生证书请求 注意PKCS1 8都可以</span><br><span class=\"line\">openssl req -new -key private_key.pem -out rsaCerReq.csr</span><br><span class=\"line\"></span><br><span class=\"line\">产生证书 注意PKCS1 8都可以</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> rsaCerReq.csr -signkey private_key.pem -out rsaCert.crt</span><br><span class=\"line\"></span><br><span class=\"line\">从证书获得公钥：</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> rsaCert.crt  -noout  -pubkey  &gt; public_key.pem</span><br><span class=\"line\"></span><br><span class=\"line\">生成PKCS12</span><br><span class=\"line\">openssl pkcs12 -<span class=\"built_in\">export</span> -inkey serverprikey.pem -<span class=\"keyword\">in</span> server.pem -password pass:<span class=\"string\">&quot;123456&quot;</span> -out server_nocret.pfx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">从PKCS12获得证书和私钥</span><br><span class=\"line\">openssl pkcs12 -<span class=\"keyword\">in</span> server_nocret.pfx -nocerts -nodes  -out alicekey.pem</span><br><span class=\"line\"></span><br><span class=\"line\">openssl pkcs12 -<span class=\"keyword\">in</span> server_nocret.pfx  -nokeys  -out cert.pem</span><br><span class=\"line\"></span><br><span class=\"line\">查看pkcs12内容 -nodes:因为私钥在在输出前会输出加密结果，所以需要nodes来保证不用打密码和不加密</span><br><span class=\"line\">openssl pkcs12 -<span class=\"keyword\">in</span> server_nocret.pfx -nocerts -nodes  -out alicekey.pem`</span><br></pre></td></tr></table></figure>\n<h3 id=\"rsa\">RSA<a title=\"#rsa\" href=\"#rsa\"></a></h3>\n<ol>\n<li>随机找两个质数 P 和 Q ,定义<code>n= p*q</code></li>\n<li>计算 n 的欧拉函数 <code>m= φ(n) =(p-1)*(1-1)</code>,为什么是这样我就不懂了 ，即表示在小于n的数中有多少个与n构成互质,</li>\n<li>随机选择一个整数 e，条件是<code>1&lt; e &lt; m</code>，且 e 与 m 互质。</li>\n<li>计算d : <code>e*d % m=1</code> ,虽然是二元一次方程，但通过拓展欧几里得算法可以得出，反正这个算法我也不懂，能算出来就能算出来吧</li>\n<li>公钥 <code>（n,e）</code> 私钥<code>（n,d）</code><br>\n为什么难以破解：在已知 公钥 N E 的情况下，想要知道 私钥的额D　就需要知道ｍ，而 <code>m=(p-1)(Q-1)</code>,想要知道P Q就只能对 N 进行分解，而大整数的因式分解是难以破解的，所以保证了安全<br>\nPKCS的结构<br>\n之前我一直奇怪为什么私钥可以转换出公钥，以为是RSA算法的原理所导致，但看起来原理并不满足私钥算出公钥的操作，所以我觉得问题出在PKCS内容上：<br>\nPKCS1 的公钥结构：</li>\n</ol>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAPublicKey ::= SEQUENCE &#123;</span><br><span class=\"line\">    modulus           INTEGER,  -- n</span><br><span class=\"line\">    publicExponent    INTEGER   -- e</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PKCS1 的私钥结构：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class=\"line\">  version           Version,</span><br><span class=\"line\">  modulus           INTEGER,  -- n</span><br><span class=\"line\">  publicExponent    INTEGER,  -- e</span><br><span class=\"line\">  privateExponent   INTEGER,  -- d</span><br><span class=\"line\">  prime1            INTEGER,  -- p</span><br><span class=\"line\">  prime2            INTEGER,  -- q</span><br><span class=\"line\">  exponent1         INTEGER,  -- d <span class=\"keyword\">mod</span> (p-<span class=\"number\">1</span>)</span><br><span class=\"line\">  exponent2         INTEGER,  -- d <span class=\"keyword\">mod</span> (q-<span class=\"number\">1</span>)</span><br><span class=\"line\">  coefficient       INTEGER,  -- (inverse of q) <span class=\"keyword\">mod</span> p</span><br><span class=\"line\">  otherPrimeInfos   OtherPrimeInfos OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PKCS1 公钥：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PublicKeyInfo ::= SEQUENCE &#123;</span><br><span class=\"line\">  algorithm       AlgorithmIdentifier,</span><br><span class=\"line\">  PublicKey       BIT STRING</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AlgorithmIdentifier ::= SEQUENCE &#123;</span><br><span class=\"line\">  algorithm       OBJECT IDENTIFIER,</span><br><span class=\"line\">  parameters      ANY DEFINED BY algorithm OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PKCS8私钥</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrivateKeyInfo ::= SEQUENCE &#123;</span><br><span class=\"line\">  version         Version,</span><br><span class=\"line\">  algorithm       AlgorithmIdentifier,</span><br><span class=\"line\">  PrivateKey      BIT STRING</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AlgorithmIdentifier ::= SEQUENCE &#123;</span><br><span class=\"line\">  algorithm       OBJECT IDENTIFIER,</span><br><span class=\"line\">  parameters      ANY DEFINED BY algorithm OPTIONAL</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>可以看出PKCS1 的私钥包含了密钥产生的所有元素，所以能算出公钥就不奇怪了，至于PKCS8 看起来不包含，但为什么也可以，我想应该只是结构不同，内容应该都是有的</p>\n<h3 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h3>\n<p><a href=\"https://segmentfault.com/a/1190000020811310\" target=\"_blank\">关于X509证书和密钥的概念</a></p>\n","prev":{"title":"Aria2-Mac配置指南","link":"2021/07/20/Aria2-Mac配置指南"},"next":{"title":"SnowFlakeID生成算法","link":"2021/06/10/SnowFlakeID生成算法"},"plink":"https://zinki.github.io/2021/06/20/证书及密钥相关概念/","toc":[{"id":"证书概述","title":"证书概述","index":"1"},{"id":"各种文件拓展名：","title":"各种文件拓展名：","index":"2"},{"id":"openssl","title":"OpenSSL","index":"3"},{"id":"rsa","title":"RSA","index":"4"},{"id":"参考","title":"参考","index":"5"}]}