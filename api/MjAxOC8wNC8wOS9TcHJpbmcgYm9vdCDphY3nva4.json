{"title":"Spring boot配置","date":"2018-04-09T12:00:00.000Z","date_formatted":{"ll":"2018年4月9日","L":"2018/04/09","MM-DD":"04-09"},"link":"2018/04/09/Spring boot 配置","tags":["Spring boot"],"categories":["学习"],"updated":"2024-10-10T08:03:05.459Z","content":"<span id=\"more\"></span>\n<blockquote></blockquote>\n<p>The Spring Boot CLI is a command line tool that can be used if you want to quickly prototype with Spring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax, without so much boilerplate code.</p>\n<p>SDKMAN! (The Software Development Kit Manager) can be used for managing multiple versions of various binary SDKs, including Groovy and the Spring Boot CLI. Get SDKMAN! from <a href=\"http://sdkman.io\">sdkman.io</a> and install Spring Boot with</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sdk install springboot</span><br><span class=\"line\">$ spring --version</span><br><span class=\"line\">Spring Boot v2.0.0.M5</span><br></pre></td></tr></table></figure>\n<blockquote></blockquote>\n<p>Spring Boot 最重要的功能是：自动配置。<br>\n为什么说是自动配置？<br>\nSpring Boot 的开启注解是：@SpringBootApplication，其实它就是由下面三个注解组成的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• @Configuration</span><br><span class=\"line\">• @ComponentScan</span><br><span class=\"line\">• @EnableAutoConfiguration</span><br></pre></td></tr></table></figure>\n<p>上面三个注解，前面两个都是 Spring 自带的，和 Spring Boot 无关，所以说上面的回答的不是在点上。具体请看这篇文章：Spring Boot 最核心的 3 个注解详解。<br>\n所以说 Spring Boot 最最核心的就是这个 @EnableAutoConfiguration 注解了，它能根据类路径下的 jar 包和配置动态加载配置和注入bean。<br>\n举个例子，比如我在 lib 下放一个 druid 连接池的 Jar 包，然后在 application.yml 文件配置 druid 相关的参数，Spring Boot 就能够自动配置所有我们需要的东西，如果我把 jar 包拿掉或者把参数去掉，那 Spring Boot 就不会自动配置。<br>\n这样我们就能把许多功能做成公共的自动配置的启动器（starters），其实 druid 连接池就是这么做的，它提供了针对 Spring Boot 的启动器：druid-spring-boot-starter。<br>\n有了这个自动配置的启动器，我们就能非常简单的使用它，<br>\n先添加 Jar 包依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>再添加相关参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url= </span><br><span class=\"line\">spring.datasource.username=</span><br><span class=\"line\">spring.datasource.password=</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<p>如果是传统的项目，我们要自己手动写一大堆的配置，而且还不灵活，有了这个启动器，我们就可以做到简单集成</p>\n","prev":{"title":"堆外内存相关知识","link":"2018/05/11/堆外内存相关知识"},"next":{"title":"常用正则表达式","link":"2018/03/17/常用正则表达式"},"plink":"https://zinki.github.io/2018/04/09/Spring boot 配置/"}