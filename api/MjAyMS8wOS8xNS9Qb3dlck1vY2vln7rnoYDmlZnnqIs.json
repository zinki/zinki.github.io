{"title":"PowerMock基础教程","date":"2021-09-15T11:20:00.000Z","date_formatted":{"ll":"2021年9月15日","L":"2021/09/15","MM-DD":"09-15"},"link":"2021/09/15/PowerMock基础教程","tags":["PowerMock"],"categories":["工作"],"updated":"2024-10-10T08:03:05.457Z","content":"<p>Mockito与PowerMock都是Java流行的一种Mock框架，使用Mock技术能让我们隔离外部依赖以便对我们自己的业务逻辑代码进行单元测试，在编写单元测试时，不需要再进行繁琐的初始化工作，在需要调用某一个接口时，直接模拟一个假方法，并任意指定方法的返回值。<span id=\"more\"></span></p>\n<h3 id=\"原理\">原理<a title=\"#原理\" href=\"#原理\"></a></h3>\n<p>Mockito的工作原理是通过创建依赖对象的proxy，所有的调用先经过proxy对象，proxy对象拦截了所有的请求再根据预设的返回值进行处理。PowerMock则在Mockito原有的基础上做了扩展，通过修改类字节码并使用自定义ClassLoader加载运行的方式来实现mock静态方法、final方法、private方法、系统类的功能。   从两者的项目结构中就可以看出，PowerMock直接依赖于Mockito，所以如果项目中已经导入了PowerMock包就不需要再单独导入Mockito包，如果两者同时导入还要小心PowerMock和Mockito不同版本之间的兼容问题：</p>\n<ol>\n<li>\n<p>Mockito包依赖：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.mockito&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.23</span>.<span class=\"number\">0</span>&lt;/version&gt;</span><br><span class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>PowerMock包依赖：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.powermock&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.0</span>.<span class=\"number\">0</span>-RC.<span class=\"number\">3</span>&lt;/version&gt;</span><br><span class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.powermock&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;<span class=\"number\">2.0</span>.<span class=\"number\">0</span>-RC.<span class=\"number\">3</span>&lt;/version&gt;</span><br><span class=\"line\">     &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"mockito的使用\">Mockito的使用<a title=\"#mockito的使用\" href=\"#mockito的使用\"></a></h3>\n<p>Mockito一般通过创建mock或spy对象，并制定具体返回规则来实现模拟的功能，在调用完成后还可以进行方法调用验证以检验程序逻辑是否正确。mock和spy对象的区别是mock对象对于未指定处理规则的调用会按方法返回值类型返回该类型的默认值（如int、long则返回0，boolean则返回false，对象则返回null，void则什么都不做），而spy对象在未指定处理规则时则会直接调用真实方法。<br>\n以下3个类是我们的项目中需要用到的一些业务类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以下忽略所有构造方法和get、set方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本地负责实现具体业务的业务类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILocalService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//外部依赖</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IRemoteService remoteService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//具体业务处理方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRemoteNode</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> remoteService.getRemoteNode(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//以下忽略其他业务调用方法，在后面例子中补充</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//外部依赖业务类，由其他人实现，可能我们的业务类写好了别人还没写好</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IRemoteService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//外部类提供的一些业务方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRemoteNode</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(num, <span class=\"string\">&quot;Node from remote service&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//其他业务方法在后面例子中补充</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是Mockito具体使用的一些示例：</p>\n<ol>\n<li>\n<p>mock外部依赖对象，并注入到我们的业务类中，以便在单元测试中进行模拟调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(MockitoJUnitRunner.class)</span> <span class=\"comment\">//让测试运行于Mockito环境</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalServiceImplMockTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@InjectMocks</span>    <span class=\"comment\">//此注解表示这个对象需要被注入mock对象</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> LocalServiceImpl localService;</span><br><span class=\"line\"> <span class=\"meta\">@Mock</span>   <span class=\"comment\">//此注解会自动创建1个mock对象并注入到@InjectMocks对象中</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> RemoteServiceImpl remoteService;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//如果不使用上述注解，可以使用@Before方法来手动进行mock对象的创建和注入，但会几行很多代码</span></span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> private LocalServiceImpl localService;</span></span><br><span class=\"line\"><span class=\"comment\"> private RemoteServiceImpl remoteService;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Before</span></span><br><span class=\"line\"><span class=\"comment\"> public void setUp() throws Exception &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     localService = new LocalServiceImpl();</span></span><br><span class=\"line\"><span class=\"comment\">     remoteService = Mockito.mock(RemoteServiceImpl.class);  //创建Mock对象</span></span><br><span class=\"line\"><span class=\"comment\">     Whitebox.setInternalState(localService, &quot;remoteService&quot;, remoteService); //注入依赖对象</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);    <span class=\"comment\">//创建一个Node对象作为返回值</span></span><br><span class=\"line\">     Mockito.when(remoteService.getRemoteNode(<span class=\"number\">1</span>)).thenReturn(target); <span class=\"comment\">//指定当remoteService.getRemoteNode(int)方法传入参数为1时返回target对象</span></span><br><span class=\"line\">     Node result = localService.getRemoteNode(<span class=\"number\">1</span>);    <span class=\"comment\">//调用我们的业务方法，业务方法内部调用依赖对象方法</span></span><br><span class=\"line\">     assertEquals(target, result);   <span class=\"comment\">//可以断言我们得到的返回值其实就是target对象</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">1</span>, result.getNum());   <span class=\"comment\">//具体属性和我们指定的返回值相同</span></span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;target&quot;</span>, result.getName());   <span class=\"comment\">//具体属性和我们指定的返回值相同</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result2 = localService.getRemoteNode(<span class=\"number\">2</span>);   <span class=\"comment\">//未指定参数为2时对应的返回规则</span></span><br><span class=\"line\">     assertNull(result2);    <span class=\"comment\">//未指定时返回为null</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>spy外部依赖对象，并注入到我们的业务类中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(MockitoJUnitRunner.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalServiceImplSpyTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@InjectMocks</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> LocalServiceImpl localService;</span><br><span class=\"line\"> <span class=\"meta\">@Spy</span>    <span class=\"comment\">//注意这里使用的是@Spy注解</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> RemoteServiceImpl remoteService;</span><br><span class=\"line\"> <span class=\"comment\">//注意如果自己创建spy对象的话要这么写：</span></span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     remoteService = new RemoteServiceImpl();    //先创建一个具体实例</span></span><br><span class=\"line\"><span class=\"comment\">     remoteService = Mockito.spy(remoteService);   //再调用Mockito.spy(T)方法创建spy对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSpy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);    <span class=\"comment\">//创建一个Node对象作为返回值</span></span><br><span class=\"line\">     Mockito.when(remoteService.getRemoteNode(<span class=\"number\">1</span>)).thenReturn(target); <span class=\"comment\">//指定当remoteService.getRemoteNode(int)方法传入参数为1时返回target对象</span></span><br><span class=\"line\">     Node result = localService.getRemoteNode(<span class=\"number\">1</span>);    <span class=\"comment\">//调用我们的业务方法，业务方法内部调用依赖对象方法</span></span><br><span class=\"line\">     assertEquals(target, result);   <span class=\"comment\">//可以断言我们得到的返回值其实就是target对象</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">1</span>, result.getNum());   <span class=\"comment\">//具体属性和我们指定的返回值相同</span></span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;target&quot;</span>, result.getName());   <span class=\"comment\">//具体属性和我们指定的返回值相同</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result2 = localService.getRemoteNode(<span class=\"number\">2</span>);   <span class=\"comment\">//未指定参数为2时的调用规则，所以会直接调用真实对象，返回remote创建的节点</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">2</span>, result2.getNum());</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;Node from remote service&quot;</span>, result2.getName());    <span class=\"comment\">//remoteService创建Node对象时设置name属性为&quot;Node from remote service&quot;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用ArgumentMatchers的any系列方法指定多种返回值，有any()、anyInt()、anyString()、anyByte()、anyLong()等等，可以看下ArgumentMatchers类源码中定义的所有方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAny</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     when(remoteService.getRemoteNode(anyInt())).thenReturn(target); <span class=\"comment\">//静态导入Mockito.when和ArgumentMatchers.anyInt后可以简化代码提升可读性</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result = localService.getRemoteNode(<span class=\"number\">20</span>); <span class=\"comment\">//上面指定了调用remoteService.getRemoteNode(int)时，不管传入什么参数都会返回target对象</span></span><br><span class=\"line\">     assertEquals(target, result);   <span class=\"comment\">//可以断言我们得到的返回值其实就是target对象</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">1</span>, result.getNum());   <span class=\"comment\">//具体属性和我们指定的返回值相同</span></span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;target&quot;</span>, result.getName());   <span class=\"comment\">//具体属性和我们指定的返回值相同</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>指定mock对象多次调用的返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 指定mock多次调用返回值</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMultipleReturn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target1 = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     Node target2 = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     Node target3 = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     when(remoteService.getRemoteNode(anyInt())).thenReturn(target1).thenReturn(target2).thenReturn(target3);</span><br><span class=\"line\">     <span class=\"comment\">//第一次调用返回target1、第二次返回target2、第三次返回target3</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result1 = localService.getRemoteNode(<span class=\"number\">1</span>); <span class=\"comment\">//第1次调用</span></span><br><span class=\"line\">     assertEquals(target1, result1);</span><br><span class=\"line\">     Node result2 = localService.getRemoteNode(<span class=\"number\">2</span>); <span class=\"comment\">//第2次调用</span></span><br><span class=\"line\">     assertEquals(target2, result2);</span><br><span class=\"line\">     Node result3 = localService.getRemoteNode(<span class=\"number\">3</span>); <span class=\"comment\">//第3次调用</span></span><br><span class=\"line\">     assertEquals(target3, result3);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>指定mock对象抛出异常（注意如果方法中未声明会抛出异常，只能指定抛出运行时异常，如果仍指定为抛出受检查异常，运行时会报错误org.mockito.exceptions.base.MockitoException: Checked exception is invalid for this method!）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RemoteServiceImpl方法：</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRemoteNode</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> MockException </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MockException(<span class=\"string\">&quot;name不能为空&quot;</span>, name);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(name);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//LocalServiceImpl方法</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRemoteNode</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> MockException </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> remoteService.getRemoteNode(name);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 指定mock对象已声明异常抛出的方法抛出受检查异常</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testExceptionDeclare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">         when(remoteService.getRemoteNode(<span class=\"string\">&quot;name&quot;</span>)).thenReturn(target).thenThrow(<span class=\"keyword\">new</span> MockException(</span><br><span class=\"line\">                 <span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;exception&quot;</span>)); <span class=\"comment\">//第一次调用正常返回，第二次则抛出一个Exception</span></span><br><span class=\"line\"></span><br><span class=\"line\">         Node result1 = localService.getRemoteNode(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">         assertEquals(target, result1); <span class=\"comment\">//第一次调用正常返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">         Node result2 = localService.getRemoteNode(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">//第二次调用不会正常返回，会抛出异常</span></span><br><span class=\"line\">         assertEquals(target, result2);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (MockException e) &#123;</span><br><span class=\"line\">         assertEquals(<span class=\"string\">&quot;exception&quot;</span>, e.getName()); <span class=\"comment\">//验证是否返回指定异常内容</span></span><br><span class=\"line\">         assertEquals(<span class=\"string\">&quot;message&quot;</span>, e.getMessage()); <span class=\"comment\">//验证是否返回指定异常内容</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 指定mock对象为声明异常抛出的方法抛出运行时异常</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRuntimeException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     when(remoteService.getRemoteNode(<span class=\"number\">1</span>)).thenThrow(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;exception&quot;</span>)); <span class=\"comment\">//指定调用时抛出一个运行时异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         Node result = localService.getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">         assertEquals(target, result);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</span><br><span class=\"line\">         assertEquals(<span class=\"string\">&quot;exception&quot;</span>, e.getMessage());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 指定mock对象未声明异常抛出的方法抛出受检查异常，以下方法执行会报错</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNotDefineCheckedException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     when(remoteService.getRemoteNode(<span class=\"number\">1</span>)).thenThrow(<span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;io exception&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         Node result = localService.getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">         assertEquals(target, result);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         assertEquals(<span class=\"string\">&quot;io exception&quot;</span>, e.getMessage());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mock void方法抛异常、什么都不做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RemoteServiceImpl方法：</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSometing</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;remote service do something!&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//LocalServiceImpl方法</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remoteDoSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     remoteService.doSometing();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//注意void方法没有返回值，所以mock规则写法顺序不一样</span></span><br><span class=\"line\"> doNothing().when(remoteService).doSometing();</span><br><span class=\"line\"> doThrow(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;exception&quot;</span>)).when(remoteService).doSometing();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>校验mock对象的调用情况（除Mockito中的never()、times(int)方法外，还有atLeast(int)、atLeastOne()、atMost(int)等方法）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 校验mock对象和方法的调用情况</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testVerify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     when(remoteService.getRemoteNode(anyInt())).thenReturn(target);</span><br><span class=\"line\"></span><br><span class=\"line\">     verify(remoteService, never()).getRemoteNode(<span class=\"number\">1</span>); <span class=\"comment\">//mock方法未调用过</span></span><br><span class=\"line\"></span><br><span class=\"line\">     localService.getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">     Mockito.verify(remoteService, times(<span class=\"number\">1</span>)).getRemoteNode(anyInt()); <span class=\"comment\">//目前mock方法调用过1次</span></span><br><span class=\"line\"></span><br><span class=\"line\">     localService.getRemoteNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">     verify(remoteService, times(<span class=\"number\">2</span>)).getRemoteNode(anyInt()); <span class=\"comment\">//目前mock方法调用过2次</span></span><br><span class=\"line\">     verify(remoteService, times(<span class=\"number\">1</span>)).getRemoteNode(<span class=\"number\">2</span>); <span class=\"comment\">//目前mock方法参数为2只调用过1次</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>利用ArgumentCaptor捕获方法参数进行mock方法参数校验</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 利用ArgumentCaptor捕获方法参数进行mock方法参数校验</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCaptor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     when(remoteService.getRemoteNode(anyString())).thenReturn(target);</span><br><span class=\"line\"></span><br><span class=\"line\">     localService.getRemoteNode(<span class=\"string\">&quot;name1&quot;</span>);</span><br><span class=\"line\">     localService.getRemoteNode(<span class=\"string\">&quot;name2&quot;</span>);</span><br><span class=\"line\">     verify(remoteService, atLeastOnce()).getRemoteNode(localCaptor.capture()); <span class=\"comment\">//设置captor</span></span><br><span class=\"line\"></span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;name2&quot;</span>, localCaptor.getValue()); <span class=\"comment\">//获取最后一次调用的参数</span></span><br><span class=\"line\">     List&lt;String&gt; list = localCaptor.getAllValues(); <span class=\"comment\">//按顺序获取所有传入的参数</span></span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;name1&quot;</span>, list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;name2&quot;</span>, list.get(<span class=\"number\">1</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mock对象调用真实方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * mock对象调用真实方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCallRealMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     when(remoteService.getRemoteNode(anyInt())).thenCallRealMethod(); <span class=\"comment\">//设置调用真实方法</span></span><br><span class=\"line\">     Node result = localService.getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     assertEquals(<span class=\"number\">1</span>, result.getNum());</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;Node from remote service&quot;</span>, result.getName());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重置mock对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重置mock，清除所有的调用记录和返回规则</span></span><br><span class=\"line\">Mockito.reset(remoteService);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>校验mock对象0调用和未被验证的调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 校验mock对象0调用和未被验证的调用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test(expected = NoInteractionsWanted.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testInteraction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    verifyZeroInteractions(remoteService); <span class=\"comment\">//目前还未被调用过，执行不报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">    when(remoteService.getRemoteNode(anyInt())).thenReturn(target);</span><br><span class=\"line\"></span><br><span class=\"line\">    localService.getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    localService.getRemoteNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">    verify(remoteService, times(<span class=\"number\">2</span>)).getRemoteNode(anyInt());</span><br><span class=\"line\">    <span class=\"comment\">// 参数1和2的两次调用都会被上面的anyInt()校验到，所以没有未被校验的调用了</span></span><br><span class=\"line\">    verifyNoMoreInteractions(remoteService);</span><br><span class=\"line\"></span><br><span class=\"line\">    reset(remoteService);</span><br><span class=\"line\">    localService.getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    localService.getRemoteNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">    verify(remoteService, times(<span class=\"number\">1</span>)).getRemoteNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 参数2的调用不会被上面的校验到，所以执行会抛异常</span></span><br><span class=\"line\">    verifyNoMoreInteractions(remoteService);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"powermock的使用\">PowerMock的使用<a title=\"#powermock的使用\" href=\"#powermock的使用\"></a></h3>\n<p>PowerMock的使用与Mockito有一些不同，首先是测试类上的@RunWith注解需要修改为：<br>\n<code>@RunWith(PowerMockRunner.class)</code></p>\n<p>第二是需要使用到@PrepareForTest注解（PrepareFotTest注解会修改传入参数类的字节码，通过修改字节码达到模拟final、static、私有方法、系统类等的功能），此注解可写在类上也可写在方法上：</p>\n<p><code>@PrepareForTest(RemoteServiceImpl.class)</code></p>\n<ol>\n<li>\n<p>mock new关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//LocalServiceImpl</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getLocalNode</span><span class=\"params\">(<span class=\"keyword\">int</span> num, String name)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(num, name);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * mock new关键字</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"meta\">@PrepareForTest(LocalServiceImpl.class)</span> <span class=\"comment\">//PrepareForTest修改local类的字节码以覆盖new的功能</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNew</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">//当传入任意int且name属性为&quot;name&quot;时，new对象返回为target</span></span><br><span class=\"line\">     <span class=\"comment\">//当参数条件使用了any系列方法时，剩余的参数都得使用相应的模糊匹配规则，如eq(&quot;name&quot;)代表参数等于&quot;name&quot;</span></span><br><span class=\"line\">     <span class=\"comment\">//剩余还有isNull(), isNotNull(), isA()等方法</span></span><br><span class=\"line\">     PowerMockito.whenNew(Node.class).withArguments(anyInt(), eq(<span class=\"string\">&quot;name&quot;</span>)).thenReturn(target);</span><br><span class=\"line\">     Node result = localService.getLocalNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">     assertEquals(target, result); <span class=\"comment\">//返回值为target</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">1</span>, result.getNum());</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;target&quot;</span>, result.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//未指定name为&quot;test&quot;的返回值，默认返回null</span></span><br><span class=\"line\">     Node result2 = localService.getLocalNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">     assertNull(result2);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mock final方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RemoteServiceImpl</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Node <span class=\"title\">getFinalNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;final node&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * mock final方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"meta\">@PrepareForTest(RemoteServiceImpl.class)</span> <span class=\"comment\">//final方法在RemoteServiceImpl类中</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFinal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">2</span>, <span class=\"string\">&quot;mock&quot;</span>);</span><br><span class=\"line\">     PowerMockito.when(remoteService.getFinalNode()).thenReturn(target); <span class=\"comment\">//指定返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result = remoteService.getFinalNode(); <span class=\"comment\">//直接调用final方法，返回mock后的值</span></span><br><span class=\"line\">     assertEquals(target, result); <span class=\"comment\">//验证返回值</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">2</span>, result.getNum());</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;mock&quot;</span>, result.getName());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mock static方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Node</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">getStaticNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;static node&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * mock static方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"meta\">@PrepareForTest(Node.class)</span> <span class=\"comment\">//static方法定义在Node类中</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStatic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">2</span>, <span class=\"string\">&quot;mock&quot;</span>);</span><br><span class=\"line\">     PowerMockito.mockStatic(Node.class); <span class=\"comment\">//mock static方法前需要加这一句</span></span><br><span class=\"line\">     PowerMockito.when(Node.getStaticNode()).thenReturn(target); <span class=\"comment\">//指定返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result = Node.getStaticNode(); <span class=\"comment\">//直接调用static方法，返回mock后的值</span></span><br><span class=\"line\">     assertEquals(target, result); <span class=\"comment\">//验证返回值</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">2</span>, result.getNum());</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;mock&quot;</span>, result.getName());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mock private方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RemoteServiceImpl</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getPrivateNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> privateMethod();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//RemoteServiceImpl</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">privateMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(<span class=\"number\">1</span>, <span class=\"string\">&quot;private node&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * mock 私有方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"meta\">@PrepareForTest(RemoteServiceImpl.class)</span> <span class=\"comment\">//private方法定义在RemoteServiceImpl类中</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPrivate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">     Node target = <span class=\"keyword\">new</span> Node(<span class=\"number\">2</span>, <span class=\"string\">&quot;mock&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">//按照真实代码调用privateMethod方法</span></span><br><span class=\"line\">     PowerMockito.when(remoteService.getPrivateNode()).thenCallRealMethod();</span><br><span class=\"line\">     <span class=\"comment\">//私有方法无法访问，类似反射传递方法名和参数，此处无参数故未传</span></span><br><span class=\"line\">     PowerMockito.when(remoteService, <span class=\"string\">&quot;privateMethod&quot;</span>).thenReturn(target);</span><br><span class=\"line\"></span><br><span class=\"line\">     Node result = remoteService.getPrivateNode();</span><br><span class=\"line\">     assertEquals(target, result); <span class=\"comment\">//验证返回值</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">2</span>, result.getNum());</span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;mock&quot;</span>, result.getName());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>mock 系统类方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RemoteServiceImpl</span></span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getSystemPropertyNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(System.getProperty(<span class=\"string\">&quot;abc&quot;</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * mock 系统类方法</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"> <span class=\"meta\">@PrepareForTest(RemoteServiceImpl.class)</span> <span class=\"comment\">//类似new关键字，系统类方法的调用在类RemoteServiceImpl中，所以这里填的是RemoteServiceImpl</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     PowerMockito.mockStatic(System.class); <span class=\"comment\">//调用的是系统类的静态方法，所以要加这一句</span></span><br><span class=\"line\">     PowerMockito.when(System.getProperty(<span class=\"string\">&quot;abc&quot;</span>)).thenReturn(<span class=\"string\">&quot;mock&quot;</span>); <span class=\"comment\">//设置System.getProperty(&quot;abc&quot;)返回&quot;mock&quot;</span></span><br><span class=\"line\">     PowerMockito.when(remoteService.getSystemPropertyNode()).thenCallRealMethod(); <span class=\"comment\">//设置mock对象调用实际方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">     Node result = remoteService.getSystemPropertyNode(); <span class=\"comment\">//按代码会返回一个name属性为&quot;mock&quot;的对象</span></span><br><span class=\"line\">     assertEquals(<span class=\"number\">0</span>, result.getNum()); <span class=\"comment\">//int默认值为0</span></span><br><span class=\"line\">     assertEquals(<span class=\"string\">&quot;mock&quot;</span>, result.getName()); <span class=\"comment\">//remoteService对象中调用System.getProperty(&quot;abc&quot;)返回的是上面设置的&quot;mock&quot;</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h3>\n<p><a href=\"https://juejin.cn/post/6844903711483887623\" target=\"_blank\">Mockito与PowerMock的使用基础教程</a><br>\n<a href=\"http://powermock.github.io/\" target=\"_blank\">powermock官网</a></p>\n","prev":{"title":"Markdown常用语法","link":"2021/10/25/Markdown常用语法"},"next":{"title":"线程池及异步使用","link":"2021/08/29/线程池及异步使用"},"plink":"https://zinki.github.io/2021/09/15/PowerMock基础教程/","toc":[{"id":"原理","title":"原理","index":"1"},{"id":"mockito的使用","title":"Mockito的使用","index":"2"},{"id":"powermock的使用","title":"PowerMock的使用","index":"3"},{"id":"参考","title":"参考","index":"4"}]}