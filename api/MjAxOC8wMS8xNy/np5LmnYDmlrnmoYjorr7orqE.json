{"title":"秒杀方案设计","date":"2018-01-17T12:05:00.000Z","date_formatted":{"ll":"2018年1月17日","L":"2018/01/17","MM-DD":"01-17"},"link":"2018/01/17/秒杀方案设计","tags":["秒杀"],"categories":["工作"],"updated":"2024-10-10T08:03:05.473Z","content":"<p>秒杀的核心问题就是极高并发处理，由于系统要在瞬时承受平时数十倍甚至上百倍的流量，这往往超出系统上限，因此处理秒杀的核心思路是流控和性能优化<span id=\"more\"></span></p>\n<h2 id=\"秒杀带来了什么？\">秒杀带来了什么？<a title=\"#秒杀带来了什么？\" href=\"#秒杀带来了什么？\"></a></h2>\n<p>秒杀或抢购活动一般会经过【预约】【抢订单】【支付】这3个大环节，而其中【抢订单】这个环节是最考验业务提供方的抗压能力的。</p>\n<p>抢订单环节一般会带来2个问题：</p>\n<ol>\n<li>高并发</li>\n</ol>\n<p>比较火热的秒杀在线人数都是10w起的，如此之高的在线人数对于网站架构从前到后都是一种考验。<br>\n2. 超卖</p>\n<p>任何商品都会有数量上限，如何避免成功下订单买到商品的人数不超过商品数量的上限，这是每个抢购活动都要面临的难题。</p>\n<h2 id=\"如何解决？\">如何解决？<a title=\"#如何解决？\" href=\"#如何解决？\"></a></h2>\n<p>首先，产品解决方案我们就不予讨论了。我们只讨论技术解决方案</p>\n<p>1、前端</p>\n<p>面对高并发的抢购活动，前端常用的三板斧是【扩容】【静态化】【限流】</p>\n<p>A：扩容</p>\n<p>加机器，这是最简单的方法，通过增加前端池的整体承载量来抗峰值。</p>\n<p>B：静态化</p>\n<p>将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态元素。通过CDN来抗峰值。</p>\n<p>C：限流</p>\n<p>一般都会采用IP级别的限流，即针对某一个IP，限制单位时间内发起请求数量。</p>\n<p>或者活动入口的时候增加游戏或者问题环节进行消峰操作。</p>\n<p>D：有损服务</p>\n<p>最后一招，在接近前端池承载能力的水位上限的时候，随机拒绝部分请求来保护活动整体的可用性。</p>\n<p>2、后端</p>\n<p>那么后端的数据库在高并发和超卖下会遇到什么问题呢？主要会有如下3个问题：（主要讨论写的问题，读的问题通过增加cache可以很容易的解决）</p>\n<p>I：　首先MySQL自身对于高并发的处理性能就会出现问题，一般来说，MySQL的处理性能会随着并发thread上升而上升，但是到了一定的并发度之后会出现明显的拐点，之后一路下降，最终甚至会比单thread的性能还要差。</p>\n<p>II： 其次，超卖的根结在于减库存操作是一个事务操作，需要先select，然后insert，最后update -1。最后这个-1操作是不能出现负数的，但是当多用户在有库存的情况下并发操作，出现负数这是无法避免的。</p>\n<p>III：最后，当减库存和高并发碰到一起的时候，由于操作的库存数目在同一行，就会出现争抢InnoDB行锁的问题，导致出现互相等待甚至死锁，从而大大降低MySQL的处理性能，最终导致前端页面出现超时异常。</p>\n<p>针对上述问题，如何解决呢？ 我们先看眼淘宝的高大上解决方案：</p>\n<ul>\n<li>\n<p>关闭死锁检测，提高并发处理性能。</p>\n</li>\n<li>\n<p>修改源代码，将排队提到进入引擎层前，降低引擎层面的并发度。</p>\n</li>\n<li>\n<p>组提交，降低server和引擎的交互次数，降低IO消耗。</p>\n</li>\n</ul>\n<p>以上内容可以参考丁奇在DTCC2013上分享的《秒杀场景下MySQL的低效》一文。在文中所有优化都使用后，TPS在高并发下，从原始的150飙升到8.5w，提升近566倍，非常吓人！！！</p>\n<p>不过结合我们的实际，改源码这种高大上的解决方案显然有那么一点不切实际。于是小伙伴们需要讨论出一种适合我们实际情况的解决方案。以下就是我们讨论的解决方案：</p>\n<p>首先设定一个前提，为了防止超卖现象，所有减库存操作都需要进行一次减后检查，保证减完不能等于负数。（由于MySQL事务的特性，这种方法只能降低超卖的数量，但是不可能完全避免超卖）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update number <span class=\"keyword\">set</span> x<span class=\"operator\">=</span>x<span class=\"number\">-1</span> <span class=\"keyword\">where</span> (x <span class=\"number\">-1</span> ) <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>解决方案1：</p>\n<p>将存库从MySQL前移到Redis中，所有的写操作放到内存中，由于Redis中不存在锁故不会出现互相等待，并且由于Redis的写性能和读性能都远高于MySQL，这就解决了高并发下的性能问题。然后通过队列等异步手段，将变化的数据异步写入到DB中。</p>\n<p>优点：解决性能问题</p>\n<p>缺点：没有解决超卖问题，同时由于异步写入DB，存在某一时刻DB和Redis中数据不一致的风险。</p>\n<p>解决方案2：</p>\n<p>引入队列，然后将所有写DB操作在单队列中排队，完全串行处理。当达到库存阀值的时候就不在消费队列，并关闭购买功能。这就解决了超卖问题。</p>\n<p>优点：解决超卖问题，略微提升性能。</p>\n<p>缺点：性能受限于队列处理机处理性能和DB的写入性能中最短的那个，另外多商品同时抢购的时候需要准备多条队列。</p>\n<p>解决方案3：</p>\n<p>将写操作前移到MC中，同时利用MC的轻量级的锁机制CAS来实现减库存操作。</p>\n<p>优点：读写在内存中，操作性能快，引入轻量级锁之后可以保证同一时刻只有一个写入成功，解决减库存问题。</p>\n<p>缺点：没有实测，基于CAS的特性不知道高并发下是否会出现大量更新失败？不过加锁之后肯定对并发性能会有影响。</p>\n<p>解决方案4：</p>\n<p>将提交操作变成两段式，先申请后确认。然后利用Redis的原子自增操作（相比较MySQL的自增来说没有空洞），同时利用Redis的事务特性来发号，保证拿到小于等于库存阀值的号的人都可以成功提交订单。然后数据异步更新到DB中。</p>\n<p>优点：解决超卖问题，库存读写都在内存中，故同时解决性能问题。</p>\n<p>缺点：由于异步写入DB，可能存在数据不一致。另可能存在少买，也就是如果拿到号的人不真正下订单，可能库存减为0，但是订单数并没有达到库存阀值。</p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<ul>\n<li>前端三板斧【扩容】【限流】【静态化】</li>\n<li>后端两条路【内存】+【排队】</li>\n</ul>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<p><a href=\"https://yq.aliyun.com/articles/441300?scm=20140722.184.2.173\" target=\"_blank\">关于秒杀和超卖的性能问题</a></p>\n","prev":{"title":"Javascript引擎工作原理","link":"2018/02/06/Javascript引擎工作原理"},"next":{"title":"WebSocket原理","link":"2018/01/05/WebSocket原理"},"plink":"https://zinki.github.io/2018/01/17/秒杀方案设计/","toc":[{"id":"秒杀带来了什么？","title":"秒杀带来了什么？","index":"1"},{"id":"如何解决？","title":"如何解决？","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"参考","title":"参考","index":"4"}]}