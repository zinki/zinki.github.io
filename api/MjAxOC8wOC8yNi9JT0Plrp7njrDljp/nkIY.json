{"title":"IOC实现原理","date":"2018-08-26T02:10:00.000Z","date_formatted":{"ll":"2018年8月26日","L":"2018/08/26","MM-DD":"08-26"},"link":"2018/08/26/IOC实现原理","tags":["IOC"],"categories":["学习"],"updated":"2024-10-10T08:03:05.445Z","content":"<p>控制反转（Inversion of Control，英文缩写为IOC）是框架的重要特征，做到控制反转需要一个容器来实现，就是我们所说的IoC容器，最常见的IoC容器是Spring。<span id=\"more\"></span></p>\n<p>控制反转从字面意思看来不是很好理解，其实就是将创建管理对象的工作交给容器来做。在以前的编程中，创建一个对象需要显式的new出来，但是控制反转是在容器初始化（或者某个指定时间节点）时通过反射机制创建好对象，在使用时去容器中获取。将对象的控制权反过来交给容器管理，所以称之为“控制反转”。</p>\n<p>IoC容器是怎么实现的呢？</p>\n<p>IoC容器的底层实现其实是工厂模式，通过工厂模式和反射机制，根据XML中给出的类名生成相应的对象。其实IoC容器的实现很简单，就是一个HashMap，接下来，我们实现一个简单的IoC容器：<br>\n1.读取配置文件，并初始化容器<br>\n配置文件可以是XML或者properties文件，下面代码是读取两种配置文件创建实例，并放到容器中（容器的实现是HashMap）：<br>\n（1）读取xml配置文件，创建实例放进容器的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassPathXMLApplicationContext implements ApplicationContext &#123;</span><br><span class=\"line\">    private Map iocContainer = new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public ClassPathXMLApplicationContext() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">            DocumentBuilder documentBuilder = factory.newDocumentBuilder();</span><br><span class=\"line\">            String filePath = this.getClass().getResource(&quot;/&quot;).getPath() + &quot;/applicationContext.xml&quot;;</span><br><span class=\"line\">            filePath = URLDecoder.decode(filePath, &quot;UTF-8&quot;);</span><br><span class=\"line\">            Document document = documentBuilder.parse(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">            NodeList beans = document.getElementsByTagName(&quot;bean&quot;);</span><br><span class=\"line\">            for(int index = 0;index&lt;beans.getLength();index++)&#123;</span><br><span class=\"line\">                Element element = (Element) beans.item(index);</span><br><span class=\"line\">                String id = element.getAttribute(&quot;id&quot;);</span><br><span class=\"line\">                String clz = element.getAttribute(&quot;class&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                Class clas = Class.forName(clz);</span><br><span class=\"line\">                Object object = clas.newInstance();</span><br><span class=\"line\">                iocContainer.put(id,object);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getBean(String beanId)&#123;</span><br><span class=\"line\">        return iocContainer.get(beanId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>读取XML创建容器<br>\n（2）读取properties文件，创建实例放进容器的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PropertiesApplicationContext implements ApplicationContext &#123;</span><br><span class=\"line\">    private Map iocContainer = new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public PropertiesApplicationContext() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            String filePath = this.getClass().getResource(&quot;/&quot;).getPath() + &quot;/applicationContext.properties&quot;;</span><br><span class=\"line\">            filePath = URLDecoder.decode(filePath, &quot;UTF-8&quot;);</span><br><span class=\"line\">            Properties properties = new Properties();</span><br><span class=\"line\">            FileInputStream fileInputStream = new FileInputStream(filePath);</span><br><span class=\"line\">            properties.load(fileInputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">            Enumeration&lt;?&gt; enumeration = properties.propertyNames();</span><br><span class=\"line\">            while (enumeration.hasMoreElements())&#123;</span><br><span class=\"line\">                String beanName = (String) enumeration.nextElement();</span><br><span class=\"line\">                String clz = properties.getProperty(beanName);</span><br><span class=\"line\">                iocContainer.put(beanName,Class.forName(beanName).newInstance());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getBean(String beanId)&#123;</span><br><span class=\"line\">        return iocContainer.get(beanId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>读取properties创建容器<br>\n2.ApplicationContextFactory工厂的实现（调用初始化容器的方法）<br>\n通过工厂创建应用上下文中配置的对象，在此工厂中判断是否存在XML或prop文件，并初始化容器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ApplicationContextFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">        ApplicationContext context = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            String xmlFilePath = ApplicationContextFactory.class.getResource(&quot;/&quot;).getPath() + &quot;/applicationContext.xml&quot;;</span><br><span class=\"line\">            xmlFilePath = URLDecoder.decode(xmlFilePath, &quot;UTF-8&quot;);</span><br><span class=\"line\">            File xmlFile = new File(xmlFilePath);</span><br><span class=\"line\"></span><br><span class=\"line\">            String propertiesFilePath = ApplicationContextFactory.class.getResource(&quot;/&quot;).getPath() + &quot;/applicationContext.properties&quot;;</span><br><span class=\"line\">            propertiesFilePath = URLDecoder.decode(propertiesFilePath, &quot;UTF-8&quot;);</span><br><span class=\"line\">            File propertiesFile = new File(propertiesFilePath);</span><br><span class=\"line\"></span><br><span class=\"line\">            if(xmlFile.exists())&#123;</span><br><span class=\"line\">                context = new ClassPathXMLApplicationContext();</span><br><span class=\"line\">            &#125;else if(propertiesFile.exists())&#123;</span><br><span class=\"line\">                context = new PropertiesApplicationContext();</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                context = null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3.容器的使用<br>\n通过工厂创建完容器就可以使用了，调用getBean(String beanId)方法获取容器中的对象实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ApplicationContextTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        ApplicationContext context = ApplicationContextFactory.getApplicationContext();</span><br><span class=\"line\">        System.out.println(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>依赖注入（DI，Dependency Injection）和依赖查找（Dependency Lookup）是什么？<br>\n依赖注入和依赖查找是IoC的两种主要实现方式，我直接把依赖查找给扔了没去理解他，一般会把IoC和DI放在一起说。<br>\n其实可以把DI和IoC理解为同一件事，都是把创建实例的控制权交给容器来操作，只是两种叫法的角度不同：</p>\n<blockquote>\n<p>控制反转是从代码操作对象的角度来看，将操作对象的控制权反转交给了容器；<br>\n依赖注入是从容器的角度看，我把你需要的对象或属性注入到你代码中去。</p>\n</blockquote>\n","prev":{"title":"IO相关知识","link":"2018/09/05/IO相关知识"},"next":{"title":"AUFS DOCKER基础技术","link":"2018/08/10/AUFS DOCKER基础技术"},"plink":"https://zinki.github.io/2018/08/26/IOC实现原理/"}