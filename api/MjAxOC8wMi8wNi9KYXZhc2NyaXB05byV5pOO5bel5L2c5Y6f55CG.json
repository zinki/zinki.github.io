{"title":"Javascript引擎工作原理","date":"2018-02-06T14:09:00.000Z","date_formatted":{"ll":"2018年2月6日","L":"2018/02/06","MM-DD":"02-06"},"link":"2018/02/06/Javascript引擎工作原理","tags":["Javascript"],"categories":["学习"],"updated":"2024-10-10T08:03:05.447Z","content":"<span id=\"more\"></span>\n<h2 id=\"什么是javascript解析引擎？\">什么是JavaScript解析引擎？<a title=\"#什么是javascript解析引擎？\" href=\"#什么是javascript解析引擎？\"></a></h2>\n<p>简单地说，JavaScript解析引擎就是能够“读懂”JavaScript代码，并准确地给出代码运行结果的一段程序。比方说，当你写了 var a = 1 + 1; 这样一段代码，JavaScript引擎做的事情就是看懂（解析）你这段代码，并且将a的值变为2。</p>\n<p>学过编译原理的人都知道，对于静态语言来说（如Java、C++、C），处理上述这些事情的叫编译器（Compiler），相应地对于JavaScript这样的动态语言则叫解释器（Interpreter）。这两者的区别用一句话来概括就是：编译器是将源代码编译为另外一种代码（比如机器码，或者字节码），而解释器是直接解析并将代码运行结果输出。 比方说，firebug的console就是一个JavaScript的解释器。</p>\n<p>但是，现在很难去界定说，JavaScript引擎它到底算是个解释器还是个编译器，因为，比如像V8（Chrome的JS引擎），它其实为了提高 JS的运行性能，在运行之前会先将JS编译为本地的机器码（native machine code），然后再去执行机器码（这样速度就快很多），相信大家对JIT（Just In Time Compilation）一定不陌生吧。</p>\n<p>我个人认为，不需要过分去强调JavaScript解析引擎到底是什么，了解它究竟做了什么事情我个人认为就可以了。对于编译器或者解释器究竟是如何看懂代码的，翻出大学编译课的教材就可以了。</p>\n<p>这里还要强调的就是，JavaScript引擎本身也是程序，代码编写而成。比如V8就是用C/C++写的。</p>\n<h2 id=\"javascript解析引擎与ecmascript是什么关系？\">JavaScript解析引擎与ECMAScript是什么关系？<a title=\"#javascript解析引擎与ecmascript是什么关系？\" href=\"#javascript解析引擎与ecmascript是什么关系？\"></a></h2>\n<p>JavaScript引擎是一段程序，我们写的JavaScript代码也是程序，如何让程序去读懂程序呢？这就需要定义规则。比如，之前提到的var a = 1 + 1;，它表示：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">左边var代表了这是申明（declaration），它申明了a这个变量</span><br><span class=\"line\"></span><br><span class=\"line\">右边的+表示要将<span class=\"number\">1</span>和<span class=\"number\">1</span>做加法</span><br><span class=\"line\"></span><br><span class=\"line\">中间的等号表示了这是个赋值语句</span><br><span class=\"line\"></span><br><span class=\"line\">最后的分号表示这句语句结束了</span><br></pre></td></tr></table></figure>\n<p>上述这些就是规则，有了它就等于有了衡量的标准，JavaScript引擎就可以根据这个标准去解析JavaScript代码了。那么这里的 ECMAScript就是定义了这些规则。其中ECMAScript 262这份文档，就是对JavaScript这门语言定义了一整套完整的标准。其中包括：</p>\n<pre><code>var，if，else，break，continue等是JavaScript的关键词\n\nabstract，int，long等是JavaScript保留词\n\n怎么样算是数字、怎么样算是字符串等等\n\n定义了操作符（+，-，&gt;，&lt;等）\n\n定义了JavaScript的语法\n\n定义了对表达式，语句等标准的处理算法，比如遇到==该如何处理\n\n⋯⋯\n</code></pre>\n<p>标准的JavaScript引擎就会根据这套文档去实现，注意这里强调了标准，因为也有不按照标准来实现的，比如IE的JS引擎。这也是为什么JavaScript会有兼容性的问题。至于为什么IE的JS引擎不按照标准来实现，就要说到浏览器大战了，这里就不赘述了，自行Google之。</p>\n<p>所以，简单的说，ECMAScript定义了语言的标准，JavaScript引擎根据它来实现，这就是两者的关系。</p>\n<h2 id=\"javascript解析引擎与浏览器又是什么关系？\">JavaScript解析引擎与浏览器又是什么关系？<a title=\"#javascript解析引擎与浏览器又是什么关系？\" href=\"#javascript解析引擎与浏览器又是什么关系？\"></a></h2>\n<p>简单地说，JavaScript引擎是浏览器的组成部分之一。因为浏览器还要做很多别的事情，比如解析页面、渲染页面、Cookie管理、历史记录 等等。那么，既然是组成部分，因此一般情况下JavaScript引擎都是浏览器开发商自行开发的。比如：IE9的Chakra、Firefox的 TraceMonkey、Chrome的V8等等。</p>\n<p>从而也看出，不同浏览器都采用了不同的JavaScript引擎。因此，我们只能说要深入了解哪个JavaScript引擎。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<p><a href=\"https://blog.csdn.net/luozhaohuan/article/details/85057877\" target=\"_blank\">Spring Cloud OpenFeign自定义日志</a></p>\n","prev":{"title":"HashMap死循环问题","link":"2018/03/09/HashMap死循环问题"},"next":{"title":"秒杀方案设计","link":"2018/01/17/秒杀方案设计"},"plink":"https://zinki.github.io/2018/02/06/Javascript引擎工作原理/","toc":[{"id":"什么是javascript解析引擎？","title":"什么是JavaScript解析引擎？","index":"1"},{"id":"javascript解析引擎与ecmascript是什么关系？","title":"JavaScript解析引擎与ECMAScript是什么关系？","index":"2"},{"id":"javascript解析引擎与浏览器又是什么关系？","title":"JavaScript解析引擎与浏览器又是什么关系？","index":"3"},{"id":"参考","title":"参考","index":"4"}]}