{"title":"跨域及解决方案","date":"2017-11-05T12:19:00.000Z","date_formatted":{"ll":"2017年11月5日","L":"2017/11/05","MM-DD":"11-05"},"link":"2017/11/05/跨域及解决方案","tags":["jsonp","跨域"],"categories":["学习"],"updated":"2024-10-11T02:16:40.029Z","content":"<p>同源策略是浏览器的一项最为基本同时也是必须遵守的安全策略。同源策略的存在，限制了“源”自A的脚本只能操作“同源”页面的DOM，“跨源”操作来源于B的页面将会被拒绝。所谓的“同源”，必须要求相应的URI在如下3个方面均是相同的。<span id=\"more\"></span></p>\n<ol>\n<li>主机名称（域名/子域名或者IP地址）</li>\n<li>端口号</li>\n<li>网络协议（Scheme，分别采用“http”和“https”协议的两个URI被视为不同源</li>\n</ol>\n<p>对于一段JavaScript脚本来说，其“源”与它存储的地址无关，而取决于脚本被加载的页面。比如在某个页面中通过 <code>&lt;script&gt;</code>标签引用了来源于不同地方的两个JavaScript脚本，它们均与当前页面同源。</p>\n<p><code>javascript</code></p>\n<script src=\"http://www.a.com/scripts/a.js\"></script>\n<script src=\"http://www.b.me/scripts/b.js\"></script>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">除了`&lt;script&gt;`标签其它一些具有src属性的标签（比如`&lt;img&gt;`），它们均具有跨域加载资源的能力，所以同源策略对它们不做限制。</span><br><span class=\"line\"></span><br><span class=\"line\">同源策略主要限制了通过XMLHttpRequest实现的Ajax请求，如果请求的是一个“异源”地址，浏览器将不允许读取返回的内容。</span><br><span class=\"line\"></span><br><span class=\"line\">JSONP实现跨域资源共享</span><br><span class=\"line\"></span><br><span class=\"line\">通过`&lt;script&gt;`标签的src属性加载的JavaScript脚本</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost:8080/api/test?callback=test&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">function test(arg)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>JSONP是利用<code>&lt;script&gt;</code>的src标签加载的脚本不受同源策略约束而采取的一种编程技巧，不是一种官方协议。由于具有src属性的HTML标签均通过HTTP-GET的方式来加载目标资源，JSONP只适用于HTTP-GET请求。</p>\n<p>我们可以利用JQuery发送JSONP的Ajax跨域请求，调用$.ajax方法并将dataType参数设置为“jsonp”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    $(function ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">             dataType : &quot;jsonp&quot;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","prev":{"title":"Nginx部署实践","link":"2017/11/27/Nginx部署实践"},"next":{"title":"并发常见问题","link":"2017/10/21/并发常见问题"},"plink":"https://zinki.github.io/2017/11/05/跨域及解决方案/"}