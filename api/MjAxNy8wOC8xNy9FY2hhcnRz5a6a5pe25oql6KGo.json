{"title":"Echarts生成定时报表","date":"2017-08-17T07:43:00.000Z","date_formatted":{"ll":"2017年8月17日","L":"2017/08/17","MM-DD":"08-17"},"link":"2017/08/17/Echarts定时报表","tags":["Echarts","PhantomJs"],"categories":["工作"],"updated":"2024-10-10T08:03:05.442Z","content":"<p>项目中使用Echarts来生成报表，效果不错，之后有个需求要设置定时时间给指定的邮箱发送报表邮件。后台使用JFreeChart生成的话样式不协调，而Echarts需要浏览器内核来执行js，后来尝试过htmlunit，对echarts支持的不是很好，遂放弃了。后来搜索中在一篇博客看到PhantomJs的介绍博客地址可以实现上述需求。<span id=\"more\"></span></p>\n<h2 id=\"phantomjs简介\">PhantomJS简介<a title=\"#phantomjs简介\" href=\"#phantomjs简介\"></a></h2>\n<p>PhantomJs是一个无头浏览器，对前端页面支持不错，对于一些需要爬取异步加载的页面很有用。</p>\n<h2 id=\"安装步骤\">安装步骤<a title=\"#安装步骤\" href=\"#安装步骤\"></a></h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入/opt目录,下载phantomjs</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\">wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2</span><br><span class=\"line\"><span class=\"comment\"># 解压软件压缩包</span></span><br><span class=\"line\">tar xvf phantomjs-2.1.1-linux-x86_64.tar.bz2</span><br><span class=\"line\"><span class=\"comment\"># 编辑配置文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 将PhantomJS的bin目录加入到PATH环境变量中</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:/opt/phantomjs-2.1.1-linux-x86_64/bin</span><br><span class=\"line\"><span class=\"comment\"># 使用source命令让刚才的配置即时生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 测试PhantomJS是否安装成功，如果打出了版本信息，即安装成功.</span></span><br><span class=\"line\">phantomjs -v</span><br></pre></td></tr></table></figure>\n<p>安装完成需要编辑phantomjs脚本，可参考以下脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var system = require(<span class=\"string\">&#x27;system&#x27;</span>);  </span><br><span class=\"line\">var page = require(<span class=\"string\">&#x27;webpage&#x27;</span>).create();</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果是windows,设置编码为gbk，防止中文乱码,Linux本身是UTF-8</span><br><span class=\"line\">var osName = system.os.name;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;windows&#x27;</span> === osName.toLowerCase()) &#123;  </span><br><span class=\"line\">    phantom.outputEncoding=<span class=\"string\">&quot;gbk&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取第二个参数(即请求地址url).</span><br><span class=\"line\">var url = system.args[1];</span><br><span class=\"line\"></span><br><span class=\"line\">// 显示控制台日志.</span><br><span class=\"line\">page.onConsoleMessage = <span class=\"keyword\">function</span>(msg) &#123;  </span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;[&#x27;</span> + msg + <span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//打开给定url的页面.</span><br><span class=\"line\">page.open(url, <span class=\"keyword\">function</span>(status) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"string\">&#x27;success&#x27;</span>) &#123;</span><br><span class=\"line\">        //console.log(<span class=\"string\">&#x27;echarts页面加载完成,加载耗时:&#x27;</span> + (new Date().getTime() - start) + <span class=\"string\">&#x27; ms&#x27;</span>);</span><br><span class=\"line\">        // 由于echarts动画效果，延迟500毫秒确保图片渲染完毕再调用下载图片方法.</span><br><span class=\"line\">         console.log(<span class=\"string\">&quot;页面加载成功!&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;页面加载失败 Page failed to load!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 10秒后再关闭浏览器.</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        phantom.exit();</span><br><span class=\"line\">    &#125;, 10000);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>将phantom.js放到/opt目录下</p>\n<h2 id=\"问题\">问题<a title=\"#问题\" href=\"#问题\"></a></h2>\n<ol>\n<li>在刚开始使用时发现没有执行页面JS，将page.content打印才发现访问页面被登陆拦截了。</li>\n</ol>\n<p>上传服务器时报错2018-09-21 15:41:29[DEBUG]-[Thread: TP-exec-1]-[org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues()]: Failed to resolve argument 0 of type ‘java.lang.String’<br>\norg.springframework.web.bind.MissingServletRequestParameterException: Required String parameter ‘doc’ is not present</p>\n<p>后来发现是web容器做了上传限制导致,在tomcat配置中加入maxPostSize=&quot;-1&quot;即可</p>\n<ol start=\"2\">\n<li>Phantomjs+echarts后台生成报表遇到一个问题生成报表文件的base64编码的URL的图片,体积会100倍,内容里会多出很多个A,在GitHub搜索到类似情况并给出<a href=\"https://github.com/ariya/phantomjs/issues/10455\" target=\"_blank\">解决方案</a><br>\n大致因为phantomjs对canvas和png格式不兼容导致,需要明确质量参数<br>\n解决方法是修改Echarts源码将echarts中用canvas生成图片的方法指定质量参数0即可解决,类似以下:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">varo=<span class=\"string\">&quot;svg&quot;</span>===<span class=\"built_in\">this</span>._zr.painter.getType()?<span class=\"built_in\">this</span>.getSvgDataUrl():<span class=\"built_in\">this</span>.getRenderedCanvas(t).toDataURL(<span class=\"string\">&quot;image/&quot;</span>+(t&amp;&amp;t.type||<span class=\"string\">&quot;png&quot;</span>,<span class=\"number\">0.5</span>));</span><br></pre></td></tr></table></figure>\n<p>使用jepg格式可以规避这种问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChart.getDataURL(&#123;</span><br><span class=\"line\">       <span class=\"attr\">type</span>:<span class=\"string\">&#x27;jpeg&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">pixelRatio</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">       <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#fff&#x27;</span></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>后来又发现个问题,线上和仿真渲染出的图片文字模糊一直存在,一直在找phantomjs的问题,想找个替代的方案.今天想到模糊的文字都是没有中文的,然后就想到是系统字体的原因<br>\n操作步骤如下:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.将附件中字体复制到 /usr/share/fonts/zh_CN  目录下</span><br><span class=\"line\">2.对目录授权 <span class=\"comment\">#chmod 777 /usr/share/fonts/zh_CN  </span></span><br><span class=\"line\">3.<span class=\"comment\">#mkfontscale  // 如果提示 mkfontscale: command not found，需自行安装 #yum install mkfontscale</span></span><br><span class=\"line\">4.<span class=\"comment\">#mkfontdir</span></span><br><span class=\"line\">5.<span class=\"comment\">#fc-cache –fv // 刷新内存中的字体缓存</span></span><br><span class=\"line\">6.<span class=\"comment\">#source /etc/profile  // 执行以下命令让字体生效</span></span><br></pre></td></tr></table></figure>\n","prev":{"title":"Dubbo源码简析","link":"2017/09/04/Dubbo源码简析"},"next":{"title":"Kubernetes基本概念","link":"2017/07/27/Kubernetes基本概念"},"plink":"https://zinki.github.io/2017/08/17/Echarts定时报表/","toc":[{"id":"phantomjs简介","title":"PhantomJS简介","index":"1"},{"id":"安装步骤","title":"安装步骤","index":"2"},{"id":"问题","title":"问题","index":"3"}]}