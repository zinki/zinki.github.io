{"title":"线程池设置线程名称","date":"2021-03-20T07:30:00.000Z","date_formatted":{"ll":"2021年3月20日","L":"2021/03/20","MM-DD":"03-20"},"link":"2021/03/20/线程池设置线程名称","tags":["线程池"],"categories":["学习"],"updated":"2024-10-11T02:20:40.325Z","content":"<p>为什么要使用线程池？<br>\n避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。<span id=\"more\"></span></p>\n<p>基于业务需要，需要支持针对特定线程进行操作，所以给线程设置名称很重要。</p>\n<h3 id=\"customizablethreadfactory\">CustomizableThreadFactory<a title=\"#customizablethreadfactory\" href=\"#customizablethreadfactory\"></a></h3>\n<p>Spring 框架提供的 CustomizableThreadFactory。</p>\n<p><code>java</code><br>\nExecutorService exec = new ThreadPoolExecutor(1, 1,<br>\n0L, TimeUnit.MILLISECONDS,<br>\nnew LinkedBlockingQueue<Runnable>(10),springThreadFactory);<br>\nexec.submit(() -&gt; {<br>\n<a href=\"http://logger.info\">logger.info</a>(“–记忆中的颜色是什么颜色—”);<br>\n});</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### ThreadFactoryBuilder</span><br><span class=\"line\"></span><br><span class=\"line\">Google guava 工具类 提供的 ThreadFactoryBuilder ,使用链式方法创建。</span><br><span class=\"line\">ThreadFactory guavaThreadFactory = new ThreadFactoryBuilder().setNameFormat(&quot;retryClient-pool-&quot;).build();</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">ExecutorService exec = new ThreadPoolExecutor(1, 1,</span><br><span class=\"line\">        0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">        new LinkedBlockingQueue&lt;Runnable&gt;(10),guavaThreadFactory );</span><br><span class=\"line\">exec.submit(() -&gt; &#123;</span><br><span class=\"line\">    logger.info(&quot;--记忆中的颜色是什么颜色---&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"basicthreadfactory\">BasicThreadFactory<a title=\"#basicthreadfactory\" href=\"#basicthreadfactory\"></a></h3>\n<p>Apache commons-lang3 提供的 BasicThreadFactory.ThreadFactory basicThreadFactory = new BasicThreadFactory.Builder().namingPattern(“basicThreadFactory-”).build();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService exec = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>),basicThreadFactory );</span><br><span class=\"line\">exec.submit(() -&gt; &#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;--记忆中的颜色是什么颜色---&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<p>最终本质都是 给 <code>java.lang.Thread#name</code> 设置名称,详情源码感兴趣的可以自行查看。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Thread thread = <span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">thread.setName(name);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上方法其实存在局限性，只能设置线程前缀且固定，后来选择从线程池取出线程重命名解决。</p>\n</blockquote>\n<h3 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h3>\n<p><a href=\"https://www.heapdump.cn/article/2361557\" target=\"_blank\">Java线程池中三种方式创建 ThreadFactory 设置线程名称</a></p>\n","prev":{"title":"Integer取值陷阱","link":"2021/04/11/Integer取值陷阱"},"next":{"title":"Kafka相关知识","link":"2021/02/17/Kafka相关知识"},"plink":"https://zinki.github.io/2021/03/20/线程池设置线程名称/","toc":[{"id":"customizablethreadfactory","title":"CustomizableThreadFactory","index":"1"},{"id":"basicthreadfactory","title":"BasicThreadFactory","index":"2"},{"id":"总结","title":"总结","index":"3"},{"id":"参考","title":"参考","index":"4"}]}